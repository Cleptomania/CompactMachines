name: Gradle Tests and Nightly (CI)

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
    tags-ignore:
      - v*
    paths-ignore:
      - 'README.md'
      - LICENSE
      - ".github/**/*"

jobs:
  vars:
    name: Get Variables
    runs-on: ubuntu-20.04
    outputs:
      version: ${{steps.version.outputs.version}}
      build: ${{steps.build.outputs.buildver}}
      release_type: ${{steps.gradle_props.outputs.cf_release_type}}
      mcVersion: ${{steps.gradle_props.outputs.minecraft_version}}
      forgeVersion: ${{steps.gradle_props.outputs.forge_version}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: Unshallow and Get Tags
        run: git fetch --prune --unshallow --tags

      - name: Read MC and Forge versions
        id: gradle_props
        uses: christian-draeger/read-properties@1.1.0
        with:
          path: "gradle.properties"
          properties: "minecraft_version forge_version cf_release_type"

      - name: Find Current Tag
        id: current
        uses: jimschubert/query-tag-action@v1
        with:
          include: 'v*'
          exclude: '*-rc*'
          commit-ish: '@'
          skip-unshallow: 'true'

      - name: Semver Version
        id: version
        run: |
          version=$(echo "${{steps.current.outputs.tag}}" | cut -dv -f2)
          echo "semver = $version"
          echo "::set-output name=version::$version"

      - name: Build Version
        id: build
        run: |
          buildver=$(git describe --tags --match v* | cut -d- -f2)
          echo "build = $buildver"
          echo "::set-output name=buildver::$buildver"

  tests:
    name: Gradle Tests
    runs-on: ubuntu-20.04
    needs: [ vars ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: Unshallow and Get Tags
        run: git fetch --prune --unshallow --tags
        
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: "17"

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create datagen assets
        continue-on-error: true
        timeout-minutes: 20
        run: ./gradlew runData
        env:
          CM_RELEASE: false
          CM_SEMVER_VERSION: ${{ needs.vars.outputs.version }}
          CM_BUILD_NUM: ${{ needs.vars.outputs.build }}
          
      - name: Test JAR with GameTest Server
        run: ./gradlew runGameTestServer
        timeout-minutes: 20
        env:
          CM_RELEASE: false
          CM_SEMVER_VERSION: ${{ needs.vars.outputs.version }}
          CM_BUILD_NUM: ${{ needs.vars.outputs.build }}
          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-data
          path: run/gametest

  nightly:
    name: Publish Nightly
    runs-on: ubuntu-20.04
    needs: [ vars, tests ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Unshallow and Get Tags
        run: git fetch --prune --unshallow --tags
        
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: "17"

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Generate Resources
        run: ./gradlew runData
        env:
          CM_RELEASE: false
          CM_SEMVER_VERSION: ${{ needs.vars.outputs.version }}
          CM_BUILD_NUM: ${{ needs.vars.outputs.build }}

      - name: Publish gradle nightly jar
        run: ./gradlew publishNightlyPublicationToGitHubPackagesRepository
        env:
          CM_RELEASE: false
          CM_SEMVER_VERSION: ${{ needs.vars.outputs.version }}
          CM_BUILD_NUM: ${{ needs.vars.outputs.build }}
          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  get-package-info:
    name: Get Latest Package Info
    runs-on: ubuntu-22.04
    needs: [ nightly ]
    outputs:
      version: ${{ steps.download-info.outputs.version }}
    steps:
      - name: Download Package Info
        id: download-info
        uses: compactmods/dl-package-info@1.0.2
        env:
          GQL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          owner: compactmods
          repo: compactmachines
          group: dev.compactmods.nightly
          filter: "^compactmachines-(?:[\\d\\.]+).jar$"
          outputFile: compactmachines-nightly.json

      - name: Debug output
        run: |
          echo "Version: ${{ steps.download-info.outputs.version }}"
          cat compactmachines-nightly.json

      - name: Read info into variable [latest]
        id: info
        run: echo "latestJson=$(cat compactmachines-nightly.json)" >> $GITHUB_OUTPUT

      - name: Download JAR and prepare artifacts
        run: |
          mkdir release
          curl -L "${{ fromJson(steps.info.outputs.latestJson)[0].url }}" -o "release/${{ fromJson(steps.info.outputs.latestJson)[0].name}}"
          mv compactmachines-nightly.json release/compactmachines-nightly.json

      - name: Add Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: release

  announce:
    name: Discord Announcement
    needs: [ vars, get-package-info ]
    runs-on: ubuntu-22.04
    steps:
      - name: Grab JAR and Info
        uses: actions/download-artifact@v3
        with:
          name: release
          path: .

      - name: Read info into variable [latest]
        id: info
        run: echo "latestJson=$(cat compactmachines-nightly.json)" >> $GITHUB_OUTPUT

      - name: Announce Release
        uses: compactmods/discord-releaser@0.1.5
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
        with:
          filename: ${{ fromJson(steps.info.outputs.latestJson)[0].name}}
          channel: ${{ secrets.NIGHTLY_CHANNEL_ID }}
          modName: Compact Machines
          modVersion: ${{ needs.get-package-info.outputs.version }}
          thumbnail: https://media.forgecdn.net/avatars/10/602/635460270800375500.png

          forgeVersion: ${{ needs.vars.outputs.forgeVersion }}
          mcVersion: ${{ needs.vars.outputs.mcVersion }}